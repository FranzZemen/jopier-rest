0 info it worked if it ends with ok
1 verbose cli [ 'E:\\dev\\node\\\\node.exe',
1 verbose cli   'E:\\dev\\node\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.35
4 verbose node symlink E:\dev\node\\node.exe
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . C:\Users\Franz\AppData\Roaming\npm-cache\3a52ce78-.lock
11 verbose tar pack [ 'C:\\Users\\Franz\\AppData\\Roaming\\npm-cache\\jopierREST\\0.0.1\\package.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball C:\Users\Franz\AppData\Roaming\npm-cache\jopierREST\0.0.1\package.tgz
13 verbose folder .
14 info prepublish jopierREST@0.0.1
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. C:\Users\Franz\AppData\Roaming\npm-cache\1f1177db-tar.lock
17 silly lockFile 6ad8f30b-che-jopierREST-0-0-1-package-tgz tar://C:\Users\Franz\AppData\Roaming\npm-cache\jopierREST\0.0.1\package.tgz
18 verbose lock tar://C:\Users\Franz\AppData\Roaming\npm-cache\jopierREST\0.0.1\package.tgz C:\Users\Franz\AppData\Roaming\npm-cache\6ad8f30b-che-jopierREST-0-0-1-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 6ad8f30b-che-jopierREST-0-0-1-package-tgz tar://C:\Users\Franz\AppData\Roaming\npm-cache\jopierREST\0.0.1\package.tgz
22 silly lockFile 6ad8f30b-che-jopierREST-0-0-1-package-tgz tar://C:\Users\Franz\AppData\Roaming\npm-cache\jopierREST\0.0.1\package.tgz
23 silly lockFile eb7b6b2f-m-cache-jopierREST-0-0-1-package C:\Users\Franz\AppData\Roaming\npm-cache\jopierREST\0.0.1\package
24 verbose lock C:\Users\Franz\AppData\Roaming\npm-cache\jopierREST\0.0.1\package C:\Users\Franz\AppData\Roaming\npm-cache\eb7b6b2f-m-cache-jopierREST-0-0-1-package.lock
25 silly lockFile eb7b6b2f-m-cache-jopierREST-0-0-1-package C:\Users\Franz\AppData\Roaming\npm-cache\jopierREST\0.0.1\package
26 silly lockFile eb7b6b2f-m-cache-jopierREST-0-0-1-package C:\Users\Franz\AppData\Roaming\npm-cache\jopierREST\0.0.1\package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'jopierREST',
29 silly publish   version: '0.0.1',
29 silly publish   description: 'Jopier CMS Server',
29 silly publish   main: 'core/Jopier.js',
29 silly publish   scripts: { test: 'mocha test' },
29 silly publish   repository: { type: 'git', url: 'https://github.com/FranzZemen/jopierREST' },
29 silly publish   keywords: [ 'Content', 'Management', 'CMS', 'angular' ],
29 silly publish   author:
29 silly publish    { name: 'Franz Zemen',
29 silly publish      email: 'franzzemen@gmail.com',
29 silly publish      url: 'https://www.linkedin.com/pub/franz-zemen/0/2b5/105' },
29 silly publish   license: 'MIT',
29 silly publish   bugs: { url: 'https://github.com/FranzZemen/jopierREST/issues' },
29 silly publish   homepage: 'https://github.com/FranzZemen/jopierREST',
29 silly publish   dependencies: { bunyan: '^1.3.3', mongodb: '^1.4.29', mongoskin: '^1.4.12' },
29 silly publish   devDependencies: { should: '^4.6.1' },
29 silly publish   readme: '# Jopier\n---\n\nJopier is a lightweight end to end Content Management System (CMS) for use in websites \nweb applications and hybrid apps.\n\nIt consists of both a front end, pubished on Bower as \'jopier\', and a back end, published on NPM as jopierREST.  Both can be used independently with custom implementations providing \'the other side\' but it is likely that most users will simply use jopier and jopierREST.\n\nThe front end is built in Angular (currently supporting 1.3.x).  Therefore, the ideal client is an angular website, web app or hybrid app.  However, many clients not currently using Angular can easily incorporate it.  If this is the case and you are new to Angular there is a minimal install section in this document.\n\n## Features\n---\n**jopier** (front end)\n  1. API providing toggling of editing mode on or off.\n  2. Directive allowing any element\'s html to be content managed, in place.\n  3. Pulls content from html markup when it doesn\'t exist.  This is a wonderful feature for existing sites - just add the directive and your content will be pulled from what you already have published in html.  Thereafter, it ignores pre-existing html content of a element with the jopier directive.\n  3. In place content editor (currently a trivial but effective implementation, see \'Backlog\')\n  4. Ability to place markup in content.\n  5. Invokes a restful api for persistence\n  6. Bulk loading of content on startup (default is each directive loads its own content when $compile\'d)\n  7. Configuration/Customizations:\n    1. Bulk loading\n    2. Element Edit control template and positioning\n    3. Element Edit form template and positioning\n    4. All styling via css\n  8. Ability to segragate content for different sites\n  9. Multple elements can have the same content.  An edit to one results in an update to all.\n  10. Content keys can be expressions, thus changing the content based on the key.\n\n**jopierREST** (back end)\n  1. Ability to define hierarchical content keys.  Hierarchical content keys are stored hierarchically in jopierREST.\n  2. MongoDB storage\n  3. Ability to segregate content for different sites or endpoints\n  4. Can be replaced with any other custom REST implementation.  Nothing magic about internals.\n  \n\n## Default Usage\n---\nThis step by step is the quickest way to get started.  Depending on your current setup you should have your first editable content on your site in as little as 5 minutes.\n### Pre-requisites\nSkip any that you already have\n  1. Vanilla version of MongoDB (installed on same host as node, port 27017)\n  2. Node installed \n  3. ExpressJS installed and setup in Node\n  4. Angular installed in your site\n    * If you\'re new to angular, or your site doesn\'t currently use angular, you simply need to include the angular.js (see https://angularjs.org/) and:\n      * Add this to your html:\n             <html ng-app="someAppName">\n      * Add this toyour javascript:\n             angular.module(\'someAppName\', [\'jopier\']); \n\n### Usage\n**Server Side**\n  1. Install jopierREST \n     * Install from npm \n           npm install jopierREST --save\n     * Require and setup in module where you add middleware (for example, in angular-fullstack that\'s either app.js or routes.js)\n           var Jopier = require(\'jopierREST\')\n           var jopier = new Jopier();\n           // or\n           var jopier = new (require(\'jopierREST\'))();\n  2. Add the jopier middleware to Express wherever you\'d like (app or route level)\n         app.use(jopier.allPath()).get(jopier.all);\n         app.use(jopier.getPath()).get(jopier.get);\n         app.use(jopier.postPath()).post(jopier.post);\n\n**Front End**\n  1. Get jopier (bower is recommended - it points to the lastest stable tag)\n         bower install jopier --save\n         or\n         git clone https://github.com/FranzZemen/jopier\n  2. Include jopier.js and jopier.css in your index.html or follow whatever build process you already use.\n  3. Per pre-requisites above, make sure your angular app module includes \'jopier\' as a module dependency:\n         angular.module(\'yourAppName\', [\n            \'other modules....\',  \n            \'jopier\',\n            \'other modules....\']);\n  4. Add a control to turn jopier on or off.  You can add the example button or use an existing menu system. \n         <button ng-click="toggleJopier()">Toggle Jopier</button>\n  5. Provide the implementation for toggleJoppier() in a controller or directive, at your option:\n         $scope.toggleJopier = function() {\n              if ($(\'.jopier-button\').is(\':visible\')) {\n                  $scope.$root.$broadcast(\'jopier-hide\');\n              } else {\n                  $scope.$root.$broadcast(\'jopier-show\');\n              }\n          };\n  6. Select an html element you want content managed.  Add the jopier attribute directive with a key.\n          <span jopier="INTRO">This was text that was there before Jopier</span>\n  7. Build and deploy your front end in whichever way you normally do.\n  8. In your browser/site, go to the control you setup above and turn Joppier on.  A Joppier button should show up near the element where we added the jopier directive.  \n  9. Click on that button, a form should appear.  It should contain the key \'INTRO\', and the inital (unsaved) contents will be the original contents of the element, or "This was text taht was there before Jopier".  Change it and save.  Reload your browser, and voila, you should see the new text.\n  10. Open a mongo client and run:\n          use jopier\n          db.jopier.find()\n   Your content should be there.  \n\n## Detailed Documentation\n---\n\n### Angular Side (jopier module)\nAt this time, the angular side includes a directive, a service and a service provider (for site configuration).  \n\n#### Install\n\n    bower install jopier\n\n#### Directive jopier\nThe jopier directive:\n  - Is restricted to A (attribute)\n  - Has an isolated scope\n  - Operates at priority 10\n\nYou can turn any element\'s contained html into  managed content by adding the jopier attribute to that element, thus activating the jopier directive.  Content is idenfied by a key, either as an attribute or contained within the element:\n\n        <some-element jopier key="SOME_KEY"></some-element> \n        or\n        <some-element jopier>SOME_KEY</some-element>\n\nThe difference between these two approaches has consequences with respect to first time initialization.  When the key is defined in the attribute, but the content is not yet managed (as in, you just added the key and deployed), jopier will use the html contents of the element as the initial content value. This is highly beneficial for existing markup that has explicit copy in it.  \n  \nKeys must be assignable as JSON keys.  Keys can be hierarchical, and hierarchy is separated by ".".  For instance KEY_LEVEL_2.KEY_LEVEL_3.KEY_3.  See the mongo section below to view the default implementaton in the database.     \n\nNote that in both cases an expression can be subsituted:\n\n    <some-element jopier key="{{someKeyExp}}"></some-element> \n    or\n    <some-element jopier>{{someKeyExp}}</some-element>\n\n#### Service $jopier\nThe $jopier service has the following methods intended for client usage:\n  - **$jopier.content(key)**:  \n   - Retrieve the content for a given key.\n   - Returns an angular promise\n  \n  - **$jopier.authToken(token)**:  \n   - Allows the client to inject an optional authToken into the service so that any content updates can be authenticated/authorized on the server side.  Content requests are not authenticated at this time (they are the equivalent as getting your html).  \n   - You should initialize this value in a controller or other service, so that it is set prior to a user actually initiating a change.  Your client is responsible for authenticating against your server and obtaining whatever authentication token you required, so you\'d likely set this prior to the user editing content but just on/after successful authentication.  \n   - The token is passed as json in the body, and thus available on your server side for whatever authorization middleware you use.  jopierREST does nothing with this token.  Since it is represented by json, you can pass just about anything.\n   - No return value\n\n#### Provider $jopierProvider\nThe $jopierProvider allows you to perform site specific configuration.  It contains the following methods:\n\n  - **$jopierProvider.preload(trueOrFalse)**:  \n   - getter/setter method for preload.  When set, preloads content upon initialization.   Preload queues without blocking individual content requests until its complete, as those subsequently quued requests will likely come from the preload cache.\n   - default value is true\n   - getter returns current value\n  - **$jopierProvider.setRestPath (path)**:\n   - getter/setter method for the base rest path to invoke the back end.  \n   - default value is /jopier.  This is an absolute path, not relative to html base tag.\n   - getter returns current value\n  - **$jopierProvider.buttonTemplate (template)**:\n   -  getter/settermethod the template to use for the control that enables content to be edited on an element (every element with the directive has one).\n   -  default is:\n           <button class="jopier-button" ng-click="editContent()" ng-show="renderButton">Joppy It</button>\n   - getter returns current value\n  - **$jopierProvider.formTemplate (template)**:\n   -  getter/settermethod the template to use for the content edit form for an element (every element with the directive has one).\n   -  default is:\n           <div class="jopier-form" ng-show="renderForm">\n               <div class="jopier-form-container">\n                    <form name="jopierForm" novalidate>\n                        <div class="jopier-form-title"><span>Edit Content (this form is resizeable)</span></div>\n                        <div class="jopier-form-control"><label>Key</label>:</div>\n                        <div class="jopier-form-control"><input type="text" name="key" ng-model="key" disabled/></div>\n                        <div class="jopier-form-control"><label>Content</label>:</div>\n                        <div class="jopier-form-control"><textarea name="content" ng-model="content"/></div>\n                        <div class="jopier-form-control jopier-form-buttons"><input type="submit" value="Save" ng-click="save()">&nbsp;&nbsp;<input type="button" value="Cancel" ng-click="cancel()"></div>\n                    </form>\n                </div>\n            </div>\n   -getter returns current value\n  - **$jopierProvider.buttonOffsetLeftPixels (number)**:\n   - getter/setter for the jopier button left offset from target element\'s absolute left position relative to the window (not parent).  This is a number in pixels, but no \'px\' appended, its a number!\n   - default is -10\n   - getter returns current value\n  - **$jopierProvider.buttonOffsetTopPixels (number)**:\n   - getter/setter for the jopier button top offset from target element\'s absolute top position relative to the window (not parent).  This is a number in pixels, but no \'px\' appended, its a number!\n   - default is -25\n   - getter returns current value\n  - **$jopierProvider.formOffsetLeftPixels (number)**:\n   - getter/setter for the jopier form left offset from target element\'s absolute left position relative to the window (not parent).  This is a number in pixels, but no \'px\' appended, its a number!\n   - default is 10\n   - getter returns current value\n  - **$jopierProvider.formOffsetTopPixels (number)**:\n   - getter/setter for the jopier form top offset from target element\'s absolute top position relative to the window (not parent).  This is a number in pixels, but no \'px\' appended, its a number!\n   - default is 25\n   - getter returns current value\n\n#### CSS\n\n    .jopier-button button, .jopier-form label, .jopier-form input, .jopier-form textarea, .jopier-form span {\n        font-family: Arial, Helvetica, sans-serif;\n    }\n\n    .jopier-form-control label, .jopier-form-control input[type=text], .jopier-form-control textarea {\n        font-size: 12px;\n        width: 100%;\n    }\n\n    .jopier-form-control input[type=submit], .jopier-form-control input[type=button] {\n        font-size: 12px;\n        background-color: #001888;\n        color: white;\n    }\n\n    .jopier-form span {\n        font-size: 14px;\n        font-weight: bold;\n    }\n\n    .jopier-form label {\n        font-weight: bold;\n    }\n\n    .jopier-form input {\n        resize: none;\n     }\n\n    .jopier-form textarea {\n        resize: both; /* Javascript sizes */\n        height: 200px;\n    }\n\n    .jopier-form-title {\n        text-align: center;\n    }\n\n    .jopier-form-container {\n        padding: 5px;\n    }\n\n    .jopier-form-control {\n        padding-right: 5px;\n    }\n\n    .jopier-form-buttons {\n        text-align:center;\n    }\n\n    .jopier-button {\n        position:absolute;\n        font-size: 10px;\n        background-color: #001888;\n        color: white;\n        z-index: 1000;\n    }\n\n    .jopier-target {\n        border-color: #001888;\n        border-style: dotted;\n        border-width: 1px;\n        padding: 5px;\n    }\n    \n    .jopier-target-hover {\n        color: black;\n        background-color: #aab2e8;\n        border-style: solid;\n    }\n    .jopier-form {\n        position:absolute;\n        width : 350px;\n        height : 315px;\n        resize : both;\n        overflow: auto;\n        border-style: solid;\n        border-width: 1px;\n        border-color: black;\n        background-color: #aab2e8;\n        color: black;\n        z-index: 1000;\n    }\n\n### Server Side (jopierREST)\n#### Install\n    npm install jopierREST --save\n\n#### Jopier Class\nClass interface, one instance per configuration.  Normally you\'d just have one instance\n\n    var Jopier = require (\'JopierREST\');\n    var defaultConfig = new Jopier(); // Default configuration\n    var someOtherConfig = new Jopier(siteKey, bunyanStreams, basePath, mongoUri, collection)\n\nUsage in Express is straightfoward.  The Jopier class exposes a path for each operation as well as a corresponding implementation method (see the quick usuage example above).\n\n##### Optional parameters\n\n  - **siteKey**:  \n   - An optional key to use as the mongo enry document identifier.  \n   - Default is the inbound base path \n  -  **bunyanStreams**:  \n   - An optional specification for logs.  The log system used is bunyan, so this is simply the streams option from that package.  \n   - Default is stdout, level info\n  - **basePath**:\n   - The base path and what the allPath method returns.  The getPath and postPath method return and additional path parameter of /:key\n   - Default is /jopier\n  - **mongoUri**:\n   -  Self explanatory.  Includes protocol,hostname, port and database.\n   -  Default is mongodb://localhost/jopier\n  -  **collection**:\n   -  The mongo collection to use.\n   -  Default is jopier\n\n\n#### REST Interface\n\nYou don\'t need to worry about the mongo database if you use the optional jopierREST backend.  However, it is documented here if needed.  Note that a custom implementatoin can change the paths.\n\n##### Get All Content API\n\n  - **GET /jopier **\n   - Returns the full hierarchical JSON document as defined in the mongo section below\n   - Status 200 if found, status 404 if content not found with specific message "No content found" to distinguish from an endpoint not found, status 500 - server error\n   \n  - **GET /jopier/:key**\n   - Returns the specific JSON content for the key:\n    - {key: \'key\', content: \'content\'}\n   - Status 200 if found, status 404 if content not found with specific message "No content found" to distinguish from an endpoint not found, status 500 - server error\n\n  - **POST /jopier/:key**\n   - Saves the specific content.  The body is json and contains {content: \'content\'} and the key is the path parameter.  Note that the client can also send other stuff such as the authToken, but jopierREST middleware does not concern itself with that.\n   - Status 200 if successful.  Status 400 if body or key are empty or missing.   \n   \n#### Mongo Database Schema\n\nYou don\'t need to worry about the mongo database if you use the optional jopierREST backend.  However, it is documented here if needed.  Basically there are two required fields, namely siteKey and content.  siteKey stores the key that was provided either optionally or by default. This is so that those wanting to segregate content somehow into different document instances can do so.   The content fields contains any number of keys, which may be hierarchical.  For instance below, the key KEY_LEVEL_2.KEY_LEVEL_3.KEY_3 is three levels deep and points to \'Some Content 3\'.\n\n    {\n        "siteKey" : "/jopier",\n        "content" : {\n            "KEY_1" : "Some content",\n            "KEY_LEVEL_2" : {\n                "KEY_2" : "Some content 2"\n                "KEY_LEVEL_3" : {\n                        "KEY_3" : "Some Content 3"\n                }\n        },\n}\n\n\n## Backlog\n---\nA partial product backlog is provided here.  These are the public facing epics or stories that may be of interest.  Please do let me know if you have additional suggestions.\n\n  1. Optional Grunt task to operate on html files server side to pre-initialize content instead of having client bulk load content on startup. \n  2. Angular interpolation and compilation of markup, in the case where new content contains angular directives etc. *\n  2. Finer grained bulk loading, for instance to load content only included in the current views etc.\n  3. Provide a filter to be used when the directive form is not convenient.\n  4. Use a wysiwig editor in the form\n\n   \n\n\n\n\n    \n    \n    \n    \n    \n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   _id: 'jopierREST@0.0.1',
29 silly publish   _shasum: '065df6838454c694fbd84291518a64daf3048689',
29 silly publish   _from: '.' }
30 verbose request where is /jopierREST
31 verbose request registry https://registry.npmjs.org/
32 verbose request id f65975162c0ad27a
33 verbose url raw /jopierREST
34 verbose url resolving [ 'https://registry.npmjs.org/', './jopierREST' ]
35 verbose url resolved https://registry.npmjs.org/jopierREST
36 verbose request where is https://registry.npmjs.org/jopierREST
37 info trying registry request attempt 1 at 00:47:52
38 http PUT https://registry.npmjs.org/jopierREST
39 http 403 https://registry.npmjs.org/jopierREST
40 verbose headers { date: 'Wed, 28 Jan 2015 06:47:53 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '76',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-ord1723-ORD',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1422427673.341513,VS0,VE356',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden New packages must have all-lowercase names: jopierREST
42 error     at RegClient.<anonymous> (E:\dev\node\node_modules\npm\node_modules\npm-registry-client\lib\request.js:308:14)
42 error     at Request._callback (E:\dev\node\node_modules\npm\node_modules\npm-registry-client\lib\request.js:246:65)
42 error     at Request.self.callback (E:\dev\node\node_modules\npm\node_modules\request\request.js:236:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (E:\dev\node\node_modules\npm\node_modules\request\request.js:1142:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (E:\dev\node\node_modules\npm\node_modules\request\request.js:1096:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:944:16
42 error     at process._tickCallback (node.js:442:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Windows_NT 6.2.9200
45 error command "E:\\dev\\node\\\\node.exe" "E:\\dev\\node\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error cwd e:\src\jopierdev\server\components\jopierREST
47 error node -v v0.10.35
48 error npm -v 1.4.28
49 verbose exit [ 1, true ]
